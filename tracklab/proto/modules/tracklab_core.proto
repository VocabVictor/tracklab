syntax = "proto3";

package tracklab_core;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "tracklab_base.proto";
import "tracklab_telemetry.proto";

option go_package = "core/pkg/service_go_proto";

message AlertRecord {
  string title = 1;
  string text = 2;
  string level = 3;
  int64 wait_duration = 4;
  _RecordInfo _info = 200;
}

message AlertResult {}

message AppleInfo {
  string name = 1;
  uint32 ecpu_cores = 2;
  uint32 pcpu_cores = 3;
  uint32 gpu_cores = 4;
  uint32 memory_gb = 5;
  uint64 swap_total_bytes = 6;
  uint64 ram_total_bytes = 7;
}

message ArtifactInfo {
  string artifact = 1;
  repeated string entrypoint = 2;
  bool notebook = 3;
  string build_context = 4;
  string dockerfile = 5;
}

message ArtifactRecord {
  string run_id = 1;
  string project = 2;
  string entity = 3;
  string type = 4;
  string name = 5;
  string digest = 6;
  string description = 7;
  string metadata = 8;
  bool user_created = 9;
  bool use_after_commit = 10;
  repeated string aliases = 11;
  ArtifactManifest manifest = 12;
  string distributed_id = 13;
  bool finalize = 14;
  string client_id = 15;
  string sequence_client_id = 16;
  string base_id = 17;
  int64 ttl_duration_seconds = 18;
  repeated string tags = 19;
  bool incremental_beta1 = 100;
  _RecordInfo _info = 200;
}

message ArtifactResult {}

message ConfigRecord {
  repeated ConfigItem update = 1;
  repeated ConfigItem remove = 2;
  _RecordInfo _info = 200;
}

message ConfigResult {}

message Control {
  bool req_resp = 1;         // record is expecting a result
  bool local = 2;            // should not be persisted or synchronized
  string relay_id = 3;       // used by service transport to identify correct stream
  string mailbox_slot = 4;   // mailbox slot
  bool always_send = 5;      // message to sender
  bool flow_control = 6;     // message should be passed to flow control
  int64 end_offset = 7;      // end of message offset of this written message
  string connection_id = 8;  // connection id
}

message CoreWeaveInfo {
  string cluster_name = 1;
  string org_id = 2;
  string region = 3;
}

message CpuInfo {
  uint32 count = 1;
  uint32 count_logical = 2;
}

message DiskInfo {
  uint64 total = 1;
  uint64 used = 2;
}

message EnvironmentRecord {
  // The environment and system metadata captured by this specific writer.

  // Operating system, e.g., "macOS-14.4.1-arm64-arm-64bit".
  string os = 1;
  // Version of the Python interpreter, e.g., "3.11.8".
  string python = 2;
  // Timestamp when the writer started.
  google.protobuf.Timestamp started_at = 3 [json_name = "startedAt"];
  // Docker image ID, if running in a Docker container.
  string docker = 4;
  // Command-line arguments passed to the script.
  repeated string args = 5;
  // The name of the program or script being executed.
  string program = 6;
  // Path to the program or script.
  string code_path = 7 [json_name = "codePath"];
  // The local filesystem path to the code being executed.
  string code_path_local = 8 [json_name = "codePathLocal"];
  // Information about the Git repository, if applicable.
  GitRepoRecord git = 9;
  // Email of the logged-in user.
  string email = 10;
  // Root directory where the script was executed.
  string root = 11;
  // Hostname of the machine.
  string host = 12;
  // Username of the user running the script.
  string username = 13;
  // Path to the executable that is running the script (e.g., path to python).
  string executable = 14;
  // URL of the Colab notebook, if running in Google Colab.
  string colab = 15;
  // Number of physical CPU cores.
  uint32 cpu_count = 16 [json_name = "cpu_count"];
  // Number of logical CPU cores.
  uint32 cpu_count_logical = 17 [json_name = "cpu_count_logical"];
  // Primary GPU type or name.
  string gpu_type = 18 [json_name = "gpu"];
  // Total number of GPUs.
  uint32 gpu_count = 19 [json_name = "gpu_count"];
  // Detailed information about mounted disk volumes.
  map<string, DiskInfo> disk = 20;
  // Information about system memory.
  MemoryInfo memory = 21;
  // CPU information.
  CpuInfo cpu = 22;
  // Information specific to Apple Silicon hardware.
  AppleInfo apple = 23;
  // Detailed information for each NVIDIA GPU.
  repeated GpuNvidiaInfo gpu_nvidia = 24 [json_name = "gpu_nvidia"];
  // Version of the CUDA toolkit, if available.
  string cuda_version = 25;
  // Detailed information for each AMD GPU.
  repeated GpuAmdInfo gpu_amd = 26 [json_name = "gpu_amd"];
  // Information from the Slurm workload manager, if present.
  map<string, string> slurm = 27;
  // Information about AWS Trainium hardware.
  TrainiumInfo trainium = 28;
  // Information about Google TPU hardware.
  TPUInfo tpu = 29;
  // Information about CoreWeave cloud environment.
  CoreWeaveInfo coreweave = 30;

  // A unique identifier for this writer session.
  //
  // This ID distinguishes this writer's metadata from that of other writers
  // that may be contributing to the same run.
  string writer_id = 199;

  _RecordInfo _info = 200;
}

message ErrorInfo {
  enum ErrorCode {
    UNKNOWN = 0;
    COMMUNICATION = 1;
    AUTHENTICATION = 2;
    USAGE = 3;
    UNSUPPORTED = 4;
  }
  string message = 1;
  ErrorCode code = 2;
}

message FileTransferInfoRequest {
  enum TransferType {
    Upload = 0;
    Download = 1;
  }
  TransferType type = 1;
  string path = 2;
  string url = 3;
  int64 size = 4;
  int64 processed = 5;
  FileCounts file_counts = 6;
}

message FilesRecord {
  repeated FilesItem files = 1;
  _RecordInfo _info = 200;
}

message FilesResult {}

message FinalRecord {
  _RecordInfo _info = 200;
}

message FooterRecord {
  _RecordInfo _info = 200;
}

message GitInfo {
  string remote = 1;
  string commit = 2;
}

message GitRepoRecord {
  string remote_url = 1 [json_name = "remote"];
  string commit = 2;
}

message GpuAmdInfo {
  string id = 1;
  string unique_id = 2;
  string vbios_version = 3;
  string performance_level = 4;
  string gpu_overdrive = 5;
  string gpu_memory_overdrive = 6;
  string max_power = 7;
  string series = 8;
  string model = 9;
  string vendor = 10;
  string sku = 11;
  string sclk_range = 12;
  string mclk_range = 13;
}

message GpuNvidiaInfo {
  string name = 1;
  uint64 memory_total = 2;
  uint32 cuda_cores = 3;
  string architecture = 4;
  string uuid = 5;
}

message HeaderRecord {
  VersionInfo version_info = 1;
  _RecordInfo _info = 200;
}

message HistoryRecord {
  repeated HistoryItem item = 1;
  HistoryStep step = 2;
  _RecordInfo _info = 200;
}

message HistoryResult {}

message JobInfoRequest {
  _RequestInfo _info = 200;
}

message JobInfoResponse {
  string sequenceId = 1;
  string version = 2;
}

message LinkArtifactResult {}

message LocalInfo {
  string version = 1;
  bool out_of_date = 2;
}

message MemoryInfo {
  uint64 total = 1;
}

message MetricControl {
  bool overwrite = 1;
}

message MetricRecord {
  // only name or globname is set
  string name = 1;
  string glob_name = 2;

  // step metric index can be used instead of step_metric when
  // MetricRecord is encoded in a list of MetricRecords
  string step_metric = 4;
  int32 step_metric_index = 5;  // one-based array index

  MetricOptions options = 6;
  MetricSummary summary = 7;
  MetricGoal goal = 8;
  MetricControl _control = 9;

  bool expanded_from_glob = 10;

  enum MetricGoal {
    GOAL_UNSET = 0;
    GOAL_MINIMIZE = 1;
    GOAL_MAXIMIZE = 2;
  }
  _RecordInfo _info = 200;
}

message MetricResult {}

message OutputRawRecord {
  enum OutputType {
    STDERR = 0;
    STDOUT = 1;
  }
  OutputType output_type = 1;
  google.protobuf.Timestamp timestamp = 2;
  string line = 3;
  _RecordInfo _info = 200;
}

message OutputRawResult {}

message OutputRecord {
  enum OutputType {
    STDERR = 0;
    STDOUT = 1;
  }
  OutputType output_type = 1;
  google.protobuf.Timestamp timestamp = 2;
  string line = 3;
  _RecordInfo _info = 200;
}

message OutputResult {}

message Record {
  int64 num = 1;
  oneof record_type {
    // Low numbers for more frequent data
    HistoryRecord history = 2;
    SummaryRecord summary = 3;
    OutputRecord output = 4;
    ConfigRecord config = 5;
    FilesRecord files = 6;
    StatsRecord stats = 7;
    ArtifactRecord artifact = 8;
    TBRecord tbrecord = 9;
    AlertRecord alert = 10;
    TelemetryRecord telemetry = 11;
    MetricRecord metric = 12;
    OutputRawRecord output_raw = 13;
    // Higher numbers for less frequent data
    RunRecord run = 17;
    RunExitRecord exit = 18;
    FinalRecord final = 20;
    HeaderRecord header = 21;
    FooterRecord footer = 22;
    RunPreemptingRecord preempting = 23;
    // Removed but kept to avoid panics in `wandb sync`.
    google.protobuf.Empty noop_link_artifact = 24;
    UseArtifactRecord use_artifact = 25;
    EnvironmentRecord environment = 26;

    // request field does not belong here longterm
    Request request = 100;
  }
  Control control = 16;
  string uuid = 19;
  _RecordInfo _info = 200;
}

message Result {
  oneof result_type {
    RunUpdateResult run_result = 17;
    RunExitResult exit_result = 18;
    HistoryResult log_result = 20;
    SummaryResult summary_result = 21;
    OutputResult output_result = 22;
    ConfigResult config_result = 23;
    /* response field does not belong here longterm */
    Response response = 100;
  }
  Control control = 16;
  string uuid = 24;
  _ResultInfo _info = 200;
}

message RunExitRecord {
  int32 exit_code = 1;
  int32 runtime = 2;
  _RecordInfo _info = 200;
}

message RunExitResult {}

message RunPreemptingRecord {
  _RecordInfo _info = 200;
}

message RunPreemptingResult {}

message RunRecord {
  string run_id = 1;
  string entity = 2;
  string project = 3;
  ConfigRecord config = 4;
  SummaryRecord summary = 5;
  string run_group = 6;
  string job_type = 7;
  string display_name = 8;
  string notes = 9;
  repeated string tags = 10;
  SettingsRecord settings = 11;
  string sweep_id = 12;
  string host = 13;
  int64 starting_step = 14;

  string storage_id = 16;
  google.protobuf.Timestamp start_time = 17;
  bool resumed = 18;
  TelemetryRecord telemetry = 19;
  int32 runtime = 20;
  GitRepoRecord git = 21;
  bool forked = 22;

  // Information about the source if this is a fork or rewind of another run.
  BranchPoint branch_point = 23;

  _RecordInfo _info = 200;
}

message RunUpdateResult {
  RunRecord run = 1;
  ErrorInfo error = 2;
}

message ServerInfoRequest {
  _RequestInfo _info = 200;
}

message ServerInfoResponse {
  LocalInfo local_info = 1;
  ServerMessages server_messages = 2;
}

message SettingsRecord {
  repeated SettingsItem item = 1;
  _RecordInfo _info = 200;
}

message StatsRecord {
  enum StatsType {
    SYSTEM = 0;
  }
  StatsType stats_type = 1;
  google.protobuf.Timestamp timestamp = 2;
  repeated StatsItem item = 3;
  _RecordInfo _info = 200;
}

message SummaryRecord {
  repeated SummaryItem update = 1;
  repeated SummaryItem remove = 2;
  _RecordInfo _info = 200;
}

message SummaryRecordRequest {
  SummaryRecord summary = 1;
}

message SummaryResult {}

message TBRecord {
  _RecordInfo _info = 200;

  // A directory containing tfevents files to watch.
  //
  // This may be an absolute or relative path.
  string log_dir = 1;

  // An optional path to an ancestor of `log_dir` used for namespacing.
  //
  // This may be an absolute or relative path.
  //
  // If set, then each event from tfevents files under `log_dir` is
  // prefixed by the file's path relative to this directory. Additionally,
  // if `save` is true, then each file's upload path is also its path
  // relative to `root_dir`.
  //
  // For example, with `root_dir` set as "tb/logs" and `log_dir` as
  // "tb/logs/train":
  //
  // * Files are uploaded to "train/events.out.tfevents"
  // * A tfevents value tagged "epoch_loss" is logged as "train/epoch_loss"
  //
  // If this is unset, then it is inferred using unspecified rules.
  string root_dir = 3;

  // Whether to save tfevents files with the run.
  //
  // When true, this uploads the tfevents files, enabling the "TensorBoard"
  // tab in W&B.
  bool save = 2;
}

message TBResult {}

message TPUInfo {
  string name = 1;
  uint32 hbm_gib = 2;
  uint32 devices_per_chip = 3;
  uint32 count = 4;
}

message TelemetryRecordRequest {
  TelemetryRecord telemetry = 1;
}

message TrainiumInfo {
  string name = 1;
  string vendor = 2;
  uint32 neuron_device_count = 3;
  uint32 neuroncore_per_device_count = 4;
}

message UseArtifactRecord {
  string id = 1;
  string type = 2;
  string name = 3;

  PartialJobArtifact partial = 4;

  _RecordInfo _info = 200;
}

message UseArtifactResult {}

message VersionInfo {
  // The version of the SDK backend that produced the data
  string producer = 1;
  // Minimum version of the wandb server that can read the data
  string min_consumer = 2;
  _RecordInfo _info = 200;
}
