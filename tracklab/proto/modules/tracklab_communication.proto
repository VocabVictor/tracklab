syntax = "proto3";

package tracklab_communication;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "tracklab_base.proto";
import "tracklab_telemetry.proto";

option go_package = "core/pkg/service_go_proto";

message AttachRequest {
  string attach_id = 20;
  _RequestInfo _info = 200;
}

message AttachResponse {
  RunRecord run = 1;
  ErrorInfo error = 2;
}

message CancelRequest {
  string cancel_slot = 1;  // mailbox slot
  _RequestInfo _info = 200;
}

message CancelResponse {}

message DeferRequest {
  enum DeferState {
    BEGIN = 0;
    FLUSH_RUN = 1;
    FLUSH_STATS = 2;
    FLUSH_PARTIAL_HISTORY = 3;
    FLUSH_TB = 4;
    FLUSH_SUM = 5;
    FLUSH_DEBOUNCER = 6;
    FLUSH_OUTPUT = 7;
    FLUSH_JOB = 8;
    FLUSH_DIR = 9;
    FLUSH_FP = 10;
    JOIN_FP = 11;
    FLUSH_FS = 12;
    FLUSH_FINAL = 13;
    END = 14;
  }
  DeferState state = 1;
  // Internal message, no _info field needed
}

message HttpResponse {
  int32 http_status_code = 1;
  string http_response_text = 2;
}

message InternalMessagesRequest {
  _RequestInfo _info = 200;
}

message InternalMessagesResponse {
  InternalMessages messages = 1;
}

message JobInputRequest {
  JobInputSource input_source = 1;
  repeated JobInputPath include_paths = 2;
  repeated JobInputPath exclude_paths = 3;
  string input_schema = 4;
}

message KeepaliveRequest {
  _RequestInfo _info = 200;
}

message KeepaliveResponse {}

message LoginRequest {
  string api_key = 1;
  _RequestInfo _info = 200;
}

message LoginResponse {
  string active_entity = 1;
}

message NetworkStatusRequest {
  _RequestInfo _info = 200;
}

message NetworkStatusResponse {
  repeated HttpResponse network_responses = 1;
}

message PauseRequest {
  _RequestInfo _info = 200;
}

message PauseResponse {}

message PythonPackagesRequest {
  message PythonPackage {
    string name = 1;
    string version = 2;
  }
  repeated PythonPackage package = 1;
}

message Request {
  reserved 22, 75, 76, 80;

  oneof request_type {
    StopStatusRequest stop_status = 1;
    NetworkStatusRequest network_status = 2;
    DeferRequest defer = 3;
    GetSummaryRequest get_summary = 4;
    LoginRequest login = 5;
    PauseRequest pause = 6;
    ResumeRequest resume = 7;
    PollExitRequest poll_exit = 8;
    SampledHistoryRequest sampled_history = 9;
    PartialHistoryRequest partial_history = 10;
    RunStartRequest run_start = 11;
    CheckVersionRequest check_version = 12;
    LogArtifactRequest log_artifact = 13;
    DownloadArtifactRequest download_artifact = 14;
    KeepaliveRequest keepalive = 17;
    ServerFeatureRequest server_feature = 18;
    RunStatusRequest run_status = 20;
    CancelRequest cancel = 21;
    InternalMessagesRequest internal_messages = 23;
    PythonPackagesRequest python_packages = 24;
    ShutdownRequest shutdown = 64;
    AttachRequest attach = 65;
    StatusRequest status = 66;
    ServerInfoRequest server_info = 67;
    SenderMarkRequest sender_mark = 68;
    SenderReadRequest sender_read = 69;
    StatusReportRequest status_report = 70;
    SummaryRecordRequest summary_record = 71;
    TelemetryRecordRequest telemetry_record = 72;
    JobInfoRequest job_info = 73;
    GetSystemMetricsRequest get_system_metrics = 74;
    JobInputRequest job_input = 77;
    LinkArtifactRequest link_artifact = 78;
    RunFinishWithoutExitRequest run_finish_without_exit = 79;
    SyncFinishRequest sync_finish = 81;

    // Requests information about tasks the service is performing.
    OperationStatsRequest operations = 82;

    TestInjectRequest test_inject = 1000;
  }
}

message Response {
  reserved 73;

  oneof response_type {
    KeepaliveResponse keepalive_response = 18;
    StopStatusResponse stop_status_response = 19;
    NetworkStatusResponse network_status_response = 20;
    LoginResponse login_response = 24;
    GetSummaryResponse get_summary_response = 25;
    PollExitResponse poll_exit_response = 26;
    SampledHistoryResponse sampled_history_response = 27;
    RunStartResponse run_start_response = 28;
    CheckVersionResponse check_version_response = 29;
    LogArtifactResponse log_artifact_response = 30;
    DownloadArtifactResponse download_artifact_response = 31;
    ServerFeatureResponse server_feature_response = 32;
    RunStatusResponse run_status_response = 35;
    CancelResponse cancel_response = 36;
    InternalMessagesResponse internal_messages_response = 37;
    ShutdownResponse shutdown_response = 64;
    AttachResponse attach_response = 65;
    StatusResponse status_response = 66;
    ServerInfoResponse server_info_response = 67;
    JobInfoResponse job_info_response = 68;
    GetSystemMetricsResponse get_system_metrics_response = 69;
    LinkArtifactResponse link_artifact_response = 71;
    SyncResponse sync_response = 70;
    RunFinishWithoutExitResponse run_finish_without_exit_response = 72;
    OperationStatsResponse operations_response = 74;
    TestInjectResponse test_inject_response = 1000;
  }
}

message ResumeRequest {
  _RequestInfo _info = 200;
}

message ResumeResponse {}

message SenderMarkRequest {}

message SenderReadRequest {
  int64 start_offset = 1;
  int64 final_offset = 2;
  // TODO: implement cancel for paused ops
  // repeated string cancel_list = 3;
}

message ServerFeatureItem {
  string name = 1;
  bool enabled = 2;
}

message ServerFeatureRequest {
  ServerFeature feature = 1;
  _RequestInfo _info = 200;
}

message ServerFeatureResponse {
  ServerFeatureItem feature = 1;
}

message ServerMessage {
  string plain_text = 1;
  string utf_text = 2;
  string html_text = 3;
  string type = 4;
  int32 level = 5;
}

message ServerMessages {
  repeated ServerMessage item = 1;
}

message ShutdownRequest {
  _RequestInfo _info = 200;
}

message ShutdownResponse {}

message StatusReportRequest {
  int64 record_num = 1;
  int64 sent_offset = 2;
  google.protobuf.Timestamp sync_time = 3;
}

message StatusRequest {
  _RequestInfo _info = 200;
}

message StatusResponse {
  bool run_should_stop = 1;
}

message StopStatusRequest {
  _RequestInfo _info = 200;
}

message StopStatusResponse {
  bool run_should_stop = 1;
}

message SyncFinishRequest {}

message SyncResponse {
  string url = 1;
  ErrorInfo error = 2;
}

message TestInjectRequest {
  bool handler_exc = 1;
  bool handler_exit = 2;
  bool handler_abort = 3;
  bool sender_exc = 4;
  bool sender_exit = 5;
  bool sender_abort = 6;
  bool req_exc = 7;
  bool req_exit = 8;
  bool req_abort = 9;
  bool resp_exc = 10;
  bool resp_exit = 11;
  bool resp_abort = 12;
  bool msg_drop = 13;
  bool msg_hang = 14;
  _RequestInfo _info = 200;
}

message TestInjectResponse {}

enum ServerFeature {
  // Indicates that the server supports recieving an array of filenames as metadata.
  LARGE_FILENAMES = 0;

  // Indicates that the server supports adding tags to artifacts.
  ARTIFACT_TAGS = 1;

  // Indicates that the server supports client IDs for artifact reference urls.
  CLIENT_IDS = 2;

  // Indicates that the server supports searching for artifacts in a registry.
  ARTIFACT_REGISTRY_SEARCH = 3;

  // Indicates that the server supports structured console logs.
  STRUCTURED_CONSOLE_LOGS = 4;

  // Indicates that the server supports querying for files on artifact collection memberships.
  ARTIFACT_COLLECTION_MEMBERSHIP_FILES = 5;

  // Indicates that the server supports downloading files with additional artifact collection memberships context in the
  // url.
  ARTIFACT_COLLECTION_MEMBERSHIP_FILE_DOWNLOAD_HANDLER = 6;

  // Indicates that the server supports passing the artifact's entity and project to the useArtifact mutation.
  USE_ARTIFACT_WITH_ENTITY_AND_PROJECT_INFORMATION = 7;

  // Indicates that the server supports expanding defined metric globs on the server side.
  EXPAND_DEFINED_METRIC_GLOBS = 8;

  // Indicates that the server supports automation event RUN_METRIC.
  AUTOMATION_EVENT_RUN_METRIC = 9;

  // Indicates that the server supports automation event RUN_METRIC_CHANGE.
  AUTOMATION_EVENT_RUN_METRIC_CHANGE = 10;

  // Indicates that the server supports automation action NO_OP.
  AUTOMATION_ACTION_NO_OP = 11;

  // Indicates that the server supports including artifact types in registry creation.
  INCLUDE_ARTIFACT_TYPES_IN_REGISTRY_CREATION = 12;

  // Indicates that the server supports querying for a artifact collection membership on the project.
  PROJECT_ARTIFACT_COLLECTION_MEMBERSHIP = 13;
}
